;    load: Load.
;    Copyright (C) 2023  C64PECTRE
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program.  If not, see https://www.gnu.org/licenses/.
;
;    Contact: https://github.com/c64pectre/os64/ create an issue

;region Macros

.macro PUTS_VW a_string
    ldx # < (a_string)
    ldy # > (a_string)
    jsr puts
.endmacro

;endregion

.export LOAD_TEST_APP_AT            := $7000
.export LOAD_SYSTEM_DRV_AT          := $9000
.export LOAD_IRQ_BRK_NMI_DRV_AT     := $9800
.export LOAD_KERNAL_MOD_AT          := $C200
.export LOAD_SCREEN_MOD_AT          := $C400
.export PAGE_HEAP_AT                := $C800
.export LOAD_SPRITES_AT             := $F200
.export LOAD_CHARSET_AT             := $F800

;region Entry point

.proc main
    try
        PUTS_VW RESOURCE_STRING_MESSAGE_LOADING
        ;
        ;jsr load_charset
        ;bcs _catch
        ;
        ;jsr load_sprites
        ;bcs _catch
        ;
        ;jsr load_system_drv
        ;bcs _catch
        ;
        ;jsr load_brk_irq_nmi_drv
        ;bcs _catch
        ;
        ;jsr load_kernal_mod
        ;bcs _catch
        ;
        ;jsr load_screen_mod
        ;bcs _catch
        ;
        jsr load_test_app
        bcs _catch
        ;
        bcc _finally
    catch
        PUTS_VW RESOURCE_STRING_MESSAGE_LOAD_FAILED
        jmp [BVECTORS_IMAIN]
    finally
        ; NOP
    end
    ;
    ;jsr bootstrap
    ;
    INIT_FRAME_AND_REGISTERS
    jsr LOAD_TEST_APP_AT
    ;
    ; Because we've been boot loaded, there is no context to rts to.
    jmp [BVECTORS_IMAIN]
    ;
    ; TODO loop forever for now
    from
        dec VIC_EC
        clc
    loop
        ; NOP
    next
        bcc _loop
    end
    ; TODO: jump to OS64 Kernel
.endproc

;endregion

;region Commands

;;; summmary: Load U64 charset
;;; return: CC=OK , CS=FAIL
.proc load_charset
    ld_xy_v_w RESOURCE_STRING_CHARSET_FILENAME
    ld_bx_v LOAD_CHARSET_AT
    jsr load_prg_at
    ; CC=OK/CS=FAIL
    rts
.endproc

;;; summmary: Load sprites
;;; return: CC=OK , CS=FAIL
.proc load_sprites
    ld_xy_v_w RESOURCE_STRING_SPRITES_FILENAME
    ld_bx_v LOAD_SPRITES_AT
    jsr load_prg_at
    ; CC=OK/CS=FAIL
    rts
.endproc

.proc load_system_drv
    ld_xy_v_w RESOURCE_STRING_SYSTEM_DRV_FILENAME
    ld_bx_v LOAD_SYSTEM_DRV_AT
    jsr load_prg_at
    ; CC=OK/CS=FAIL

    rts
.endproc

;;; summmary: Load BRK handler
;;; return: CC=OK , CS=FAIL
.proc load_brk_irq_nmi_drv
    ld_xy_v_w RESOURCE_STRING_IRQ_BRK_NMI_HANDLER_FILENAME
    ld_bx_v LOAD_IRQ_BRK_NMI_DRV_AT
    jsr load_prg_at
    ; CC=OK/CS=FAIL
    rts
.endproc

;;; summmary: Load kernal mod
;;; return: CC=OK , CS=FAIL
.proc load_kernal_mod
    ld_xy_v_w RESOURCE_STRING_KERNAL_MOD_FILENAME
    ld_bx_v LOAD_KERNAL_MOD_AT
    jsr load_prg_at
    ; CC=OK/CS=FAIL
    rts
.endproc

;;; summmary: Load screen mod
;;; return: CC=OK , CS=FAIL
.proc load_screen_mod
    ld_xy_v_w RESOURCE_STRING_SCREEN_MOD_FILENAME
    ld_bx_v LOAD_SCREEN_MOD_AT
    jsr load_prg_at
    ; CC=OK/CS=FAIL
    rts
.endproc

;;; summmary: Load test app
;;; return: CC=OK , CS=FAIL
.proc load_test_app
    ld_xy_v_w RESOURCE_STRING_TEST_APP_FILENAME
    ld_bx_v LOAD_TEST_APP_AT
    jsr load_prg_at
    ; CC=OK/CS=FAIL
    rts
.endproc

PAGE_HEAP_CAPACITY = 6
.export PAGE_HEAP_BASE := PAGE_HEAP_AT

MOD_00_KERNAL__ID   = $00
MOD_00_KERNAL__PAGE = > LOAD_KERNAL_MOD_AT
MOD_00_KERNAL__SIZE = 2

MOD_01_SCREEN__ID = $01
MOD_00_SCREEN__PAGE = > LOAD_SCREEN_MOD_AT
MOD_00_SCREEN__SIZE = 2

MOD_00_KERNAL__MODULE_MAP__CAPACITY = 16
.export MOD_00_KERNAL__MODULE_MAP__ENTRY_PAGE := $C000  ; $C000-$C00F
.export MOD_00_KERNAL__MODULE_MAP__ENTRY_SIZE := $C010  ; $C010-$C01F

MOD_00_KERNAL__PAGE_HEAP_MAP__CAPACITY = 16
.export MOD_00_KERNAL__PAGE_HEAP_MAP__ENTRY_PAGE := $C020  ; $C020-$C02F
.export MOD_00_KERNAL__PAGE_HEAP_MAP__ENTRY_SIZE := $C030  ; $C030-$C03F

.export MOD_00_KERNAL__PAGE_HEAP__FREE_HANDLE_LIST__HEAD := MOD_00_KERNAL__PAGE_HEAP_MAP__ENTRY_PAGE + 0
.export MOD_00_KERNAL__PAGE_HEAP__FREE_PAGE_LIST__HEAD   := MOD_00_KERNAL__PAGE_HEAP_MAP__ENTRY_SIZE + 0

.proc bootstrap
    ;
    ; Initialize module map
    from
        ldx # MOD_00_KERNAL__MODULE_MAP__CAPACITY
    loop
        lda # 0
        sta MOD_00_KERNAL__MODULE_MAP__ENTRY_PAGE - 1 , x
        sta MOD_00_KERNAL__MODULE_MAP__ENTRY_SIZE - 1 , x
    next
        dex
        bne _loop
    end
    ;
    ; Initialize page heap
    from
        ldx # MOD_00_KERNAL__PAGE_HEAP_MAP__CAPACITY
    loop
        lda # 0
        sta MOD_00_KERNAL__PAGE_HEAP_MAP__ENTRY_SIZE - 1 , x

        dex
        txa
        sta MOD_00_KERNAL__PAGE_HEAP_MAP__ENTRY_PAGE - 1 , x
    next
        bne _loop
    end
    ;
    lda # 0
    sta MOD_00_KERNAL__PAGE_HEAP_MAP__ENTRY_PAGE + MOD_00_KERNAL__PAGE_HEAP_MAP__CAPACITY - 1
    ;
    lda # > PAGE_HEAP_BASE
    sta MOD_00_KERNAL__PAGE_HEAP__FREE_PAGE_LIST__HEAD
    ;
    ; Kernal
    ldx # MOD_00_KERNAL__ID
    lda # MOD_00_KERNAL__PAGE
    sta MOD_00_KERNAL__MODULE_MAP__ENTRY_PAGE, x
    lda # MOD_00_KERNAL__SIZE
    sta MOD_00_KERNAL__MODULE_MAP__ENTRY_SIZE , x
    ; Screen
    ldx # MOD_01_SCREEN__ID
    lda # MOD_00_SCREEN__PAGE
    sta MOD_00_KERNAL__MODULE_MAP__ENTRY_PAGE, x
    lda # MOD_00_SCREEN__SIZE
    sta MOD_00_KERNAL__MODULE_MAP__ENTRY_SIZE , x
    ;
    ; Wire in brk, irq, nmi handlers
    jsr irq_brk_nmi_drv_init
    ;
    rts
.endproc

; endregion
