;    test-iec-app: OS64 app test IEC.
;    Copyright (C) 2023  C64PECTRE
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program.  If not, see https://www.gnu.org/licenses/.
;
;    Contact: https://github.com/c64pectre/os64/ create an issue

;region Constants

    BYTE_BIT_COUNT = 8

;endregion

;;; summary: input a byte from serial bus
;;; parameters:
;;; return:
;;;   P.C: CC=OK / CS=FAIL
;;;   AL byte received if OK
;;;   AH error code on FAIL
;;; changed: A
;;; notes: X and Y unchanged!
.proc iec_byte_in
    ;__begin_cedecl_frame
        ; [FP  ] <== X = [FP] = [RSP]
        ;FRAME_DECLARE_3_LOCAL_VAR_INIT_0
        ; [FP  ] <== X = [FP] = [RSP]
        ; [FP-1][$00] @L_BSOUR1
        ; [FP-2][$00] @L_COUNT  ;set eoi/error flag
        ; [FP-3][$00] @L_STATUS
        ;L_BSOUR1 = < -1
        ;L_COUNT = < -2
        ;L_STATUS = < -3
        ; check A=0
        ; check X=[FP]=[RSP]
        try
            from outer
                sei
                lda # 0                                 ;set eoi/error flag
                sta L_COUNT
                jsr clkhi                               ;make sure clock line is released
                ;
                ;wait for clock high
                from_loop_next
                    jsr debpia
                    bpl _loop
                end
            loop ;outer
                from inner
                    lda # $01                           ;set timer 2 for 256us
                    sta CIA_1_TB_HI
                    lda # CIA_CRB_TIMER_B_START_STOP_START | CIA_CRB_TIMER_B_UNDERFLOW_RESTART_OFF | CIA_CRB_LOAD_LATCH_INTO_TIMER_ONCE_ON
                                                        ; (timrb=$19)
                    sta CIA_1_CRB
                    jsr datahi                          ;data line high (makes timming more like vic-20
                    lda CIA_1_ICR                       ;clear the timer flags
                loop ;inner
                    lda CIA_1_ICR                       ;Flags will be cleared after reading the register!
                    and # CIA_ICR_TIMER_B_MASK          ;$02  check the timer
                    if_ne_then
                        lda L_COUNT                     ;check for error (twice thru timeouts)
                        if_ne_then
                            lda # KERNAL_IO_ERROR_READ_TIMEOUT
                            jmp _catch
                        else
                            ; check EQ
                            ;timer ran out: mark EOI
                            jsr datalo                  ;data line low
                            jsr clkhi                   ;delay and then set datahi (fix for 40us c64)
                            lda # KERNAL_IO_EOI
                            jsr udst
                            ; check NE
                            bne inner::_end             ;break bra
                        end
                    else_end
                next ;inner
                    jsr debpia                          ;check the clock line
                    bmi _loop                           ;no not yet
                    bpl outer::_end;                    ;yes..... break break bra
                end ;inner
            next ;outer
                ; check L_COUNT = 0
                inc L_COUNT                             ;go around again for error check on eoi
                ; check L_COUNT = 1
                bne _loop                               ;eoiacp bra?
            end ;outer
            ;===============================================================
            ;
            ; do the byte transfer
            from
                lda # BYTE_BIT_COUNT                    ;set up counter
                sta L_COUNT
            acp03:
            loop
                from_loop
                    from_loop_next
                        lda CIA_2_PRA                   ;wait for clock high
                        cmp CIA_2_PRA                   ;debounce
                        bne _loop
                    end
                next
                    asl                                 ;shift data into carry
                    bpl _loop                           ;clock still low
                end
                ;
                ror L_BSOUR1                            ;rotate data bit in
                ;
                acp03a:
                from_loop
                    from_loop_next
                        lda CIA_2_PRA                       ;wait for clock low
                        cmp CIA_2_PRA                       ;debounce
                        bne _loop
                    end
                next
                    asl
                    bmi _loop
                end
            next
                dec L_COUNT
                bne _loop                                   ;more bits
            end
            ;
            ; Exit
            jsr datalo
            ;
            ;check for eoi
            lda L_STATUS
            and # KERNAL_IO_EOI
            if_ne_then
                ;no
                jsr dladlh
            else_end
            ;
            lda L_BSOUR1
            cli
            clc                                             ;OK
            bcc _finally                                    ;bra
        catch
            jsr udst
            cli
            jsr dlabye
            sec                                             ;FAIL
        finally_end
    ;__end_cedecl_frame
    rts
.endproc
