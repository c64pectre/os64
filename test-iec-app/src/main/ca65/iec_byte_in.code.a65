;    test-iec-app: OS64 app test IEC.
;    Copyright (C) 2023  C64PECTRE
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program.  If not, see https://www.gnu.org/licenses/.
;
;    Contact: https://github.com/c64pectre/os64/ create an issue

;region Constants

    BYTE_BIT_COUNT = 8

;endregion

;;; summary: input a byte from serial bus
;;; parameters:
;;; return:
;;;   C   CC=OK / CS=FAIL
;;;   AL  Byte received if OK
;;;   AH  Error code on FAIL (see KERNAL_IO_ERROR_*)
;;; changed: A X=FP=RSP Y=FSP N+ V+ I0 Z0 C+
.proc iec_byte_in
    __begin_cedecl_frame
        try
            from outer
                sei
                ; Because we rotate all 8 bits into result character read in AL, wo do not need to initialize it.
                clr_ah                                      ;Clear eoi/error flag
                ;
                jsr clkhi                                   ;Make sure clock line is released
                ;
                ; Wait for clock high
                from_loop_next
                    jsr debpia
                    bpl _loop
                end
                ;
                ldy # 0                                     ;Retry counter
            loop ;outer
                from inner
                    lda # $01                               ;set timer 2 for 256us
                    sta CIA_1_TB_HI
                    lda # CIA_CRB_TIMER_B_START_STOP_START | CIA_CRB_TIMER_B_UNDERFLOW_RESTART_OFF | CIA_CRB_LOAD_LATCH_INTO_TIMER_ONCE_ON
                                                            ; (timrb=$19)
                    sta CIA_1_CRB
                    jsr datahi                              ;Data line high (makes timming more like VIC-20)
                    lda CIA_1_ICR                           ;clear the timer flags
                loop ;inner
                    lda CIA_1_ICR                           ;Flags will be cleared after reading the register!
                    and # CIA_ICR_TIMER_B_MASK              ;check the timer
                    if_ne_then
                        tya                                 ;check for error (twice thru timeouts)
                        if_ne_then
                            lda # KERNAL_IO_ERROR_READ_TIMEOUT
                            jmp _catch
                        else
                            ;check EQ
                            ;timer ran out: mark EOI
                            jsr datalo                      ;Data line low
                            jsr clkhi                       ;Delay and then set datahi (fix for 40us c64)
                            lda # KERNAL_IO_EOI
                            ora AH
                            sta AH
                            ; check NE
                            bne inner::_end                 ;break bra
                        end
                    else_end
                next ;inner
                    jsr debpia                              ;Check the clock line
                    bmi _loop                               ;no not yet
                    bpl outer::_end;                        ;yes..... break break bra
                end ;inner
            next ;outer
                ; check Y=0
                iny                                         ;go around again for error check on eoi
                ; check Y=1
                bne _loop                                   ;bra?
            end ;outer
            ;
            ; do the byte transfer
            from
                ldy # BYTE_BIT_COUNT
            loop
                from_loop
                    from_loop_next
                        lda CIA_2_PRA                       ;wait for clock high
                        cmp CIA_2_PRA                       ;debounce
                        bne _loop
                    end
                next
                    asl                                     ;shift data into carry
                    bpl _loop                               ;clock still low
                end
                ;
                ror AL                                      ;rotate data bit in
                ;
                from_loop
                    from_loop_next
                        lda CIA_2_PRA                       ;wait for clock low
                        cmp CIA_2_PRA                       ;debounce
                        bne _loop
                    end
                next
                    asl
                    bmi _loop
                end
            next
                dey
                bne _loop
            end
            ; check Y=0
            ;
            ; Exit
            jsr datalo
            ;
            ;check for eoi
            lda AH
            and # KERNAL_IO_EOI
            if_ne_then
                ;no
                jsr dladlh
            else_end
            ;
            ; Result in AL
            cli
            clc                                             ;OK
            bcc _finally                                    ;bra
        catch
            ; A contains Error code
            ora AH
            sta AH
            cli
            sec                                             ;FAIL
        finally_end
    __end_cedecl_frame
    rts
.endproc
