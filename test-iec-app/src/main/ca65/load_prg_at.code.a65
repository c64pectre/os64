;    test-iec-app: OS64 app test IEC.
;    Copyright (C) 2023  C64PECTRE
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program.  If not, see https://www.gnu.org/licenses/.
;
;    Contact: https://github.com/c64pectre/os64/ create an issue

;;; summary: Load PRG file
;;; parameters:
;;;   A_PA
;;;   A_FILENAME
;;;   A_ADDRESS
;;; return:
;;;   P.C: 0=CC=OK / 1=CS=FAIL
;;;   A: error code on FAIL
;;; changed: A+ X=FP=RSP Y=FSP AX+ N+ V+ I0 Z0 C+
.proc load_prg_at
    __begin_cedecl_frame
        ; We reserve 1 byte for call parameter, is more efficient.
        inx
        stx FP
        stx RSP
        P_PA_SA_BYTE = < -1
        A_PA = < -2
        A_FILENAME = < -4
        A_ADDRESS = < -6
        ;
        try
            ld_p_p_b P_PA_SA_BYTE, A_PA
            jsr iec_listen
            bcs _catch
            ;
            ld_p_v_b P_PA_SA_BYTE, DEVICE_DISK_CHANNEL_LOAD | SERIAL_COMMAND_SA_OPEN
            jsr iec_listen_second
            bcs _catch
            ;
            ; Send file name
            from_loop
                lda [A_FILENAME, X]
                beq _end
                st_a_p P_PA_SA_BYTE
                jsr iec_byte_out
            next
                inc_p_w A_FILENAME
                bne _loop                                   ;bra
            end
            ;
            jsr iec_unlisten
            ;
            ld_p_p_b P_PA_SA_BYTE, A_PA
            jsr iec_talk                                    ;Establish channel
            bcs _catch
            ;
            ld_p_v_b P_PA_SA_BYTE, DEVICE_DISK_CHANNEL_LOAD | SERIAL_COMMAND_SA_SECOND
            jsr iec_talk_second
            bcs _catch
            ;
            ; Skip load address (2 bytes)
            jsr iec_byte_in
            bcs _catch
            jsr iec_byte_in
            bcs _catch
            ;
            from
                ;RESTORE_FP
            loop
                jsr iec_byte_in                             ; C=CC:OK/CS:FAIL-or-char-with-EOI  AL:char AH:error
                if_cs_then
                    lda AH
                    and # KERNAL_IO_ERROR_READ_TIMEOUT | KERNAL_IO_ERROR_DEVICE_NOT_PRESENT
                    bne _catch
                else_end
                ;
                lda AL
                sta [A_ADDRESS, X]
                lda AH
                and # KERNAL_IO_EOI
                bne _end                                    ; break because EOI
            next
                inc_p_w A_ADDRESS
                bne _loop                                   ; bra because: we should never load wraping $FFFF to $0000
            end
            ;
            ;Close channel (jsr iec_untalk) not needed on EOI says https://www.pagetable.com/?p=1031.
            ;
            ;Close file
            ld_p_p_b P_PA_SA_BYTE, A_PA
            jsr iec_listen
            ;
            ld_p_v_b P_PA_SA_BYTE, DEVICE_DISK_CHANNEL_LOAD | SERIAL_COMMAND_SA_CLOSE
            jsr iec_listen_second
            jsr iec_unlisten
            ;
            clc                                             ;OK
            bcc _finally
        catch
            jsr iec_unlisten                                ;C+ so we cannot move to finally
            jsr iec_untalk                                  ;C+ so we cannot move to finally
            sec                                             ;FAIL
        finally_end
    __end_cedecl_frame
    rts
.endproc
