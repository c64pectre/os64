;    test-iec-app: OS64 app test IEC.
;    Copyright (C) 2023  C64PECTRE
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program.  If not, see https://www.gnu.org/licenses/.
;
;    Contact: https://github.com/c64pectre/os64/ create an issue

;region Constants

    BYTE_BIT_COUNT = 8

;endregion

;;; summary: Set clock line high (inverted)
;;; changed: A
.proc clkhi
    lda CIA_2_PRA
    and # CIA_2_PRA_W_SERIAL_INV_CLOCK_OUT_CLR              ; $ff-$10
    sta CIA_2_PRA
    rts
.endproc

;;; summary: Set clock line low  (inverted)
;;; changed: A, P.Z=0
.proc clklo
    lda CIA_2_PRA
    ora # CIA_2_PRA_W_SERIAL_INV_CLOCK_OUT_SET              ; $10
    sta CIA_2_PRA
    rts
.endproc

;;; summary: set data line high (inverted)
;;; changed: A
.proc datahi
    lda CIA_2_PRA
    and # CIA_2_PRA_W_SERIAL_INV_DATA_OUT_CLR               ; $ff-$20
    sta CIA_2_PRA
    rts
.endproc

;;; summary: Set data line low  (inverted)
;;; changed: A, P.Z=0
.proc datalo
    lda CIA_2_PRA
    ora # CIA_2_PRA_W_SERIAL_INV_DATA_OUT_SET               ; $20
    sta CIA_2_PRA
    rts
.endproc

;;; summary: Debounce pia
;;; return:
;;;   C: data in
;;;   N: clock in
;;; changed: A
.proc debpia
    from_loop_next
        lda CIA_2_PRA
        cmp CIA_2_PRA
        bne _loop
    end
    ;
    asl                                 ;shift data bit into C and clock into N
    ;
    rts
.endproc

;;; summary: Release ATN, delay and then release clock and data.
;;; changed: A
.proc dlabye
    jsr scatn
    jsr dladlh
    rts
.endproc

;;; summary: Delay approx 60 us end then set clock and data high
;;; changed: A
.proc dladlh
    txa
        from
            ldx # 10
        loop_next
            dex
            bne _loop
        end
    tax
    jsr clkhi
    jsr datahi
    rts
.endproc

;;; summary: Send byte at SELF_BSOUR
;;; return:
;;;   P.C    0=CC=OK/1=CS=FAIL
;;;   P.I=0  Interrupts off
;;;   A      Error code on FAIL
;;; changed: A, Y
.proc isour
    try
        sei
        ;
        jsr datahi                                          ;make sure data is released
        jsr debpia                                          ;data should be low
        if_cs_then
            lda # KERNAL_IO_ERROR_DEVICE_NOT_PRESENT
            bcs _catch                                      ;bra
        else_end
        ;
        jsr clkhi                                           ;clock line high
        bit SELF_R2D2                                       ;eoi flag test
        if_mi_then
            ; Yes EOI: do the eoi
            ; wait for data to go high
            from_loop_next
                jsr debpia
                bcc _loop
            end
            ; check P.C=1
            ;
            ;wait for data to go low
            from_loop_next
                jsr debpia      
                bcs _loop
            end
            ; check P.C=0
        else_end
        ;
        ;wait for data high
        from_loop
            jsr debpia
        next
            bcc _loop
        end
        ; check P.C=1
        ;
        jsr clklo                                           ;set clock low
        ; check P.Z=0
        ;
        ; Send data
        from
            ;ldp_vb L_COUNT, BYTE_BIT_COUNT
            ldy # BYTE_BIT_COUNT
            ;sta L_COUNT
        loop
            jsr debpia                                      ;debounce bus and shift data bit into C and clock into N
            ; Data must be hi
            if_cc_then
                lda # KERNAL_IO_ERROR_FRAMING
                bne _catch                                  ;bra
            else_end
            ;
            ror SELF_BSOUR                                  ;next bit into carry
            if_cc_then
                jsr datalo
                ; check P.Z=0
                bne _end                ;bra
            else
                jsr datahi
            end
            ;
            jsr clkhi
            nop
            nop
            nop
            nop
            lda CIA_2_PRA
            and # CIA_2_PRA_W_SERIAL_INV_DATA_OUT_CLR           ;data high ($FF-$20=$DF=%11011111)
            ora # CIA_2_PRA_W_SERIAL_INV_CLOCK_OUT_SET          ;clock low ($10=%00010000)
            sta CIA_2_PRA
        next
            ;dec_p L_COUNT
            ;dec L_COUNT
            dey
            bne _loop
        end

        lda # $04        ;set timer for 1ms
        sta CIA_1_TB_HI
        ; trigger one-shot timer
        lda # CIA_CRB_TIMER_B_START_STOP_START | CIA_CRB_TIMER_B_UNDERFLOW_RESTART_OFF | CIA_CRB_LOAD_LATCH_INTO_TIMER_ONCE_ON      ; (timrb=$19)
        sta CIA_1_CRB
        lda CIA_1_ICR                   ;clear the timer flags
        ;
        from_loop_next
            lda CIA_1_ICR
            and # CIA_ICR_TIMER_B_MASK      ; $02 = %00000010
            if_ne_then
                lda # KERNAL_IO_ERROR_FRAMING
                bne _catch              ; bra
            else_end
            ;
            jsr debpia
            bcs _loop
        end
        ; check P.C=0
        cli                             ; let irq's continue
        bcc _finally                    ; bra
    catch
        ;jsr udst
        tay
        cli                             ; irq's were off...turn on
        jsr dlabye
        tya
        sec
    finally_end
    ;
    rts
.endproc

;;; summary: isoura
;;; return:
;;;   P.C: 0=CC=OK / 1=CS=FAIL
;;;   P.I = 0
.proc isoura
    sei
    jsr clklo
    jsr datahi
    jsr w1ms
    jsr isour                                               ; Does cli
    ; ensure P.I = 0
    rts
.endproc

;;; summary: list1
;;; parameters:
;;;   A  Byte to send (firstly, any buffered byte is send)
;;; return:
;;;   P.I=0
;;;   P.C: 0=CC=OK / 1=CS=FAIL
.proc list1
    try
        pha
            bit SELF_C3P0                                   ; character left in buf?
            if_mi_then
                ; yes
                ; Send buffered character
                sec                                         ; set eoi flag
                ror SELF_R2D2
                ;
                jsr isour                                   ; send last character
                ;bcs _catch                                 ; is not in Kernal
                ;
                lsr SELF_C3P0                               ; buffer clear flag
                lsr SELF_R2D2                               ; clear eoi flag
            else_end
            ;
            ;lda_p A_PA                                     ; talk/listen address
        pla
        sta SELF_BSOUR
        ;
        sei                                                 ; below isoura -> isour does cli
        ;
        jsr datahi
        cmp # SERIAL_COMMAND_UNLISTEN                       ; $3f clkhi only on unlisten
        if_eq_then
            jsr clkhi
        else_end
        ;
        lda CIA_2_PRA                                       ; assert attention
        ora # CIA_2_PRA_W_SERIAL_INV_ATN_OUT_SET            ; $08
        sta CIA_2_PRA
        ;
        jsr isoura
        ;bcs _catch
        ;bcc _finally
    catch_finally_end
    ; check P.I=0
    ; CC=OK / CS=FAIL
    rts
.endproc

;;; summary: Disable rs232. Need to enable in user code.
;;; changed: P.Z=0 P.N=0
.proc rsp232
    ;pha                                                     ;TODO kan weg
        lda # CIA_ICR_FLAG_DISABLE
        sta CIA_2_ICR
    ;pla                                                     ;TODO kan weg
    ;
    rts
.endproc

;;; summary: Release attention
;;; changed: A, CIA_2_PRA.W_SERIAL_INV_ATN_OUT=0
.proc scatn
    lda CIA_2_PRA
    and # CIA_2_PRA_W_SERIAL_INV_ATN_OUT_CLR                ; $ff-$08=$F7=%11110111
    sta CIA_2_PRA
    rts
.endproc

;;; summary: IEC talk or listen
;;; parameters:
;;;   A     IEC command to ora A_PA with
;;;   A_PA  Primary (file/device) address
;;; returns:
;;;   P.C: CC=OK, CS=FAIL
;;;   A: Error code on fail
;;; changed: A SELF_C3P0 SELF_BSOUR SELF_R2D2
.proc talk_or_listen
    ;[FP  ] <== X = [FP] = [RSP]
    ;[FP-1] A_PA
    A_PA = < -1
    ;
    ora_p A_PA
    sta_p A_PA
    ;
    jsr rsp232                          ; protect self from rs232 nmi's
    lda_p A_PA
    jsr list1
    rts
.endproc

.proc untalk_or_unlisten
    jsr list1                                               ;send it
    jsr dlabye
    rts
.endproc

;;; summary: Delay 1ms using loop
;;; changed: A
.proc w1ms
    txa
        from
            ldx # 200-16                ;1000us-(1000/500*8=#40us holds)
        loop_next
            dex                         ;5us loop
            bne _loop
        end
    tax
    rts
.endproc
