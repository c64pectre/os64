#    boot: Boot.
#    Copyright (C) 2023  C64PECTRE
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see https://www.gnu.org/licenses/.
#
#    Contact: https://github.com/c64pectre/os64/ create an issue

FEATURES {
    STARTADDRESS: default=$0110;
}
SYMBOLS {
    __LOADADDR__       : type=import;
    BASIC_MEMORY_BEGIN : type=import;
    BASIC_MEMORY_END   : type=import;
}
MEMORY {
    ZEROPAGE    : file="" , start=$0000 , size=$0100 , type=rw , define=yes; # end=$00FF
    STACK       : file="" , start=$0100 , size=$0100 , type=rw , define=yes; # end=$01FF
    OS_RAM      : file="" , start=$0200 , size=$0200 , type=rw , define=yes; # end=$03FF
    TEXT_SCREEN : file="" , start=$0400 , size=$0400 , type=rw , define=yes; # end=$07FF
    BASIC_RAM   : file="" , start=$0800 , size=$9800 , type=rw , define=yes; # end=$9FFF
    BASIC_ROM   : file="" , start=$A000 , size=$2000 , type=ro , define=yes; # end=$BFFF
    HI_RAM      : file="" , start=$C000 , size=$1000 , type=rw , define=yes; # end=$CFFF
    IO_AREA     : file="" , start=$D000 , size=$1000 , type=rw , define=yes; # end=$DFFF
    IO_CHAR_ROM : file="" , start=$D000 , size=$1000 , type=ro , define=yes; # end=$DFFF
    IO_RAM      : file="" , start=$D000 , size=$1000 , type=rw , define=yes; # end=$DFFF
    KERNAL_ROM  : file="" , start=$E000 , size=$2000 , type=ro , define=yes; # end=$FFFF
    # Program
    LOADADDR_MEM: file="%O" , type=ro , define=yes , start=%S - 2                                       , size=2;
    EXEHDR_MEM  : file="%O" , type=ro , define=yes , start=%S                                           , size=(BASIC_MEMORY_END - BASIC_MEMORY_BEGIN)              , fill=yes , fillval=$00;
    LAUNCHER_MEM: file="%O" , type=ro , define=yes , start=%S + (BASIC_MEMORY_END - BASIC_MEMORY_BEGIN) , size=$0203 - %S - (BASIC_MEMORY_END - BASIC_MEMORY_BEGIN) , fill=yes , fillval=$02;
        # Fill value fills upper region of stack with result address $0202 is $0203 on rts which is the jumper
    JUMPER_MEM  : file="%O" , type=ro , define=yes , start=$0203                                        , size=3;
}
SEGMENTS {
    LOADADDR: load=LOADADDR_MEM , type=ro , define=yes;
    EXEHDR  : load=EXEHDR_MEM   , type=ro , define=yes;
    LAUNCHER: load=LAUNCHER_MEM , type=ro , define=yes;
    JUMPER  : load=JUMPER_MEM   , type=ro , define=yes;
}
